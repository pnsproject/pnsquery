type Subdomain @entity {
  id: ID!

  name: String

  parent: String
  
  owner: String
  
  expires: String

  removed: Boolean

  infos: [SubdomainInfo]!
}

type SubdomainInfo @jsonField {
  tx_hash: String
  
  owner: String

  from: String

  duration: String

  cost: String

  timestamp: Int!

  success: Boolean

  type: String!
}

enum SubdomainType {
  # 兑换码兑换的
  Redeem
  # 续费的
  Renew
  # 通过注册的
  Register
  # 通过管理员续费的
  RenewByManager
  # 通过管理员注册的
  RegisterByManager
  # 交易
  Transfer
}

type CapacityChanged @entity {
  id: ID!

  node: String

  capacity: String
}

type PriceChanged @entity {
  id: ID!

  basePrices: [String]

  rentPrices: [String]
}



  # [string, string, BigNumber] & {
  #   owner: string;
  #   approved: string;
  #   tokenId: BigNumber;
  # }

type Approval @entity {
  id: ID!

  owner: String

  approved: String

  node: String
}


  # [string, string, boolean] & {
  #   owner: string;
  #   operator: string;
  #   approved: boolean;
  # }

type ApprovalForAll @entity {
  id: ID!

  owner: String

  operator: String

  approved: Boolean
}
  # [BigNumber, string] & { tokenId: BigNumber; resolver: string }
type NewResolver @entity {
  id: ID!

  node: String

  resolver: String
}


type NewKey @entity {
  id: ID!

  keyIndex: String

  key: String

  timestamp: Int
}

type ResetRecords @entity {
  id: ID!

  node: String
}

type Set @entity {
  id: ID!

  node: String

  keyHash: String

  value: String
}

type SetName @entity {
  id: ID!

  addr: String

  node: String
}

type SetNftName @entity {
  id: ID!

  nftAddr: String

  nftNode: String

  node: String
}

type PnsConfigUpdated @entity {
  id: ID!

  flags: String
}

type ControllerConfigUpdated @entity {
  id: ID!

  flags: String
}


type ManagerChanged @entity {
  id: ID!

  manager: String

  role: Boolean
}

type RootOwnershipTransferred @entity {
  id: ID!

  oldRoot: String

  newRoot: String
}

type MetadataUpdated @entity {
  id: ID!

  data: [String]
}
