type Subdomain @entity {
  id: ID!

  name: String

  parent: String
  
  owner: String
}

type CapacityChanged @entity {
  id: ID!

  node: String

  capacity: String
}

type PriceChanged @entity {
  id: ID!

  basePrices: [String]

  rentPrices: [String]
}

# NameRegistered(address to, uint256 node, uint256 cost, uint256 expires, string name)

type NameRegistered @entity {
  id: ID!

  to: String

  node: String

  cost: String

  expires: String

  name: String
}

  # [string, string, BigNumber] & {
  #   owner: string;
  #   approved: string;
  #   tokenId: BigNumber;
  # }

type Approval @entity {
  id: ID!

  owner: String

  approved: String

  node: String
}

  # [string, string, boolean] & {
  #   owner: string;
  #   operator: string;
  #   approved: boolean;
  # }

type ApprovalForAll @entity {
  id: ID!

  owner: String

  operator: String

  approved: Boolean
}
  # [BigNumber, string] & { tokenId: BigNumber; resolver: string }
type NewResolver @entity {
  id: ID!

  node: String

  resolver: String
}


  # [string, BigNumber, BigNumber, string] & {
  #   to: string;
  #   tokenId: BigNumber;
  #   subtokenId: BigNumber;
  #   name: string;
  # }
type NewSubdomain @entity {
  id: ID!

  to: String

  node: String

  subnode: String
  
  name: String
}

  # [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
type Transfer @entity {
  id: ID!

  from: String

  to: String

  node: String
}

type NewKey @entity {
  id: ID!

  keyIndex: String

  key: String
}

type ResetRecords @entity {
  id: ID!

  node: String
}

type Set @entity {
  id: ID!

  node: String

  keyHash: String

  value: String
}

type SetName @entity {
  id: ID!

  addr: String

  node: String
}

type SetNftName @entity {
  id: ID!

  nftAddr: String

  nftNode: String

  node: String
}

type PnsConfigUpdated @entity {
  id: ID!

  flags: String
}

type ControllerConfigUpdated @entity {
  id: ID!

  flags: String
}


type ManagerChanged @entity {
  id: ID!

  manager: String

  role: Boolean
}

type RootOwnershipTransferred @entity {
  id: ID!

  oldRoot: String

  newRoot: String
}

type MetadataUpdated @entity {
  id: ID!

  data: [String]
}

type NameRenewed @entity {
  id: ID!

  node: String

  cost: String

  expires: String

  name: String
}

type nameRedeem @entity {
  id:ID!

  name: String

  owner: String

  duration: String

  deadline: String

  code: String

  success:Boolean

  timestamp: Int

  from: String
}

type nameRegister @entity {
  id: ID!

  name: String

  owner: String

  duration: String

  success:Boolean

  timestamp: Int

  from: String
}

type renew @entity {
  id: ID!

  name: String

  duration: String

  success:Boolean

  timestamp: Int

  from: String
}

type renewByManager @entity {
  id: ID!

  name: String

  duration: String

  success:Boolean

  timestamp: Int

  from: String
}

type nameRegisterByManager @entity {
  id: ID!

  name: String

  owner: String

  duration: String

  success:Boolean

  timestamp: Int

  from: String

  keyHashes: [String]

  values: [String]

}

type nameRegisterWithConfig @entity {
  id: ID!

  name: String

  owner: String

  success:Boolean

  timestamp: Int

  from: String

  duration: String

  keyHashes: [String]

  values: [String]

}