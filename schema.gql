"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Account {
  id: String!
  domains(where: DomainWhereInput, orderBy: [DomainOrderByInput!], offset: Int, limit: Int): [Domain!]!
  authorities(where: AuthorisationChangedWhereInput, orderBy: [AuthorisationChangedOrderByInput!], offset: Int, limit: Int): [AuthorisationChanged!]!
  authoriseds(where: AuthorisationChangedWhereInput, orderBy: [AuthorisationChangedOrderByInput!], offset: Int, limit: Int): [AuthorisationChanged!]!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

interface AccountEvent {
  id: String!
  account: Account!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
}

type AccountEventEdge {
  node: AccountEvent!
  cursor: String!
}

enum AccountEventOrderByInput {
  id_ASC
  id_DESC
  account_id_ASC
  account_id_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  _type_ASC
  _type_DESC
}

type AccountEventsConnection {
  edges: [AccountEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AccountEventWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  account_isNull: Boolean
  account: AccountWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  AND: [AccountEventWhereInput!]
  OR: [AccountEventWhereInput!]
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
}

type AccountsConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AccountWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domains_every: DomainWhereInput
  domains_some: DomainWhereInput
  domains_none: DomainWhereInput
  authorities_every: AuthorisationChangedWhereInput
  authorities_some: AuthorisationChangedWhereInput
  authorities_none: AuthorisationChangedWhereInput
  authoriseds_every: AuthorisationChangedWhereInput
  authoriseds_some: AuthorisationChangedWhereInput
  authoriseds_none: AuthorisationChangedWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
}

type Approval implements AccountEvent {
  id: String!
  account: Account!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  operator: Account!
  tokens: Domain!
}

type ApprovalEdge {
  node: Approval!
  cursor: String!
}

enum ApprovalOrderByInput {
  id_ASC
  id_DESC
  account_id_ASC
  account_id_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  operator_id_ASC
  operator_id_DESC
  tokens_id_ASC
  tokens_id_DESC
  tokens_name_ASC
  tokens_name_DESC
  tokens_labelName_ASC
  tokens_labelName_DESC
  tokens_labelhash_ASC
  tokens_labelhash_DESC
  tokens_subdomainCount_ASC
  tokens_subdomainCount_DESC
  tokens_createdAt_ASC
  tokens_createdAt_DESC
}

type ApprovalsConnection {
  edges: [ApprovalEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ApprovalWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  account_isNull: Boolean
  account: AccountWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  operator_isNull: Boolean
  operator: AccountWhereInput
  tokens_isNull: Boolean
  tokens: DomainWhereInput
  AND: [ApprovalWhereInput!]
  OR: [ApprovalWhereInput!]
}

type AuthorisationChanged {
  id: String!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  owner: Account!
  target: Account!
  isAuthorized: Boolean!
}

type AuthorisationChangedEdge {
  node: AuthorisationChanged!
  cursor: String!
}

enum AuthorisationChangedOrderByInput {
  id_ASC
  id_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  owner_id_ASC
  owner_id_DESC
  target_id_ASC
  target_id_DESC
  isAuthorized_ASC
  isAuthorized_DESC
}

type AuthorisationChangedsConnection {
  edges: [AuthorisationChangedEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AuthorisationChangedWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  owner_isNull: Boolean
  owner: AccountWhereInput
  target_isNull: Boolean
  target: AccountWhereInput
  isAuthorized_isNull: Boolean
  isAuthorized_eq: Boolean
  isAuthorized_not_eq: Boolean
  AND: [AuthorisationChangedWhereInput!]
  OR: [AuthorisationChangedWhereInput!]
}

"""Big number integer"""
scalar BigInt

type CapacityUpdated implements RegistrationEvent {
  id: String!
  registration: Registration!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  registrant: Account!
  domain: Domain!
  capacity: BigInt!
}

type CapacityUpdatedEdge {
  node: CapacityUpdated!
  cursor: String!
}

enum CapacityUpdatedOrderByInput {
  id_ASC
  id_DESC
  registration_id_ASC
  registration_id_DESC
  registration_expiryDate_ASC
  registration_expiryDate_DESC
  registration_capacity_ASC
  registration_capacity_DESC
  registration_labelName_ASC
  registration_labelName_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  registrant_id_ASC
  registrant_id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  capacity_ASC
  capacity_DESC
}

type CapacityUpdatedsConnection {
  edges: [CapacityUpdatedEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CapacityUpdatedWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  registration_isNull: Boolean
  registration: RegistrationWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  registrant_isNull: Boolean
  registrant: AccountWhereInput
  domain_isNull: Boolean
  domain: DomainWhereInput
  capacity_isNull: Boolean
  capacity_eq: BigInt
  capacity_not_eq: BigInt
  capacity_gt: BigInt
  capacity_gte: BigInt
  capacity_lt: BigInt
  capacity_lte: BigInt
  capacity_in: [BigInt!]
  capacity_not_in: [BigInt!]
  AND: [CapacityUpdatedWhereInput!]
  OR: [CapacityUpdatedWhereInput!]
}

type Domain {
  id: String!
  name: String
  labelName: String
  labelhash: String
  parent: Domain
  subdomains(where: DomainWhereInput, orderBy: [DomainOrderByInput!], offset: Int, limit: Int): [Domain!]!
  subdomainCount: Int!
  resolvedAddress: Account
  owner: Account
  resolver: Resolver
  createdAt: BigInt!
  registrations(where: RegistrationWhereInput, orderBy: [RegistrationOrderByInput!], offset: Int, limit: Int): [Registration!]!
}

type DomainEdge {
  node: Domain!
  cursor: String!
}

interface DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
}

type DomainEventEdge {
  node: DomainEvent!
  cursor: String!
}

enum DomainEventOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  _type_ASC
  _type_DESC
}

type DomainEventsConnection {
  edges: [DomainEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input DomainEventWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  AND: [DomainEventWhereInput!]
  OR: [DomainEventWhereInput!]
}

enum DomainOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  labelName_ASC
  labelName_DESC
  labelhash_ASC
  labelhash_DESC
  parent_id_ASC
  parent_id_DESC
  parent_name_ASC
  parent_name_DESC
  parent_labelName_ASC
  parent_labelName_DESC
  parent_labelhash_ASC
  parent_labelhash_DESC
  parent_subdomainCount_ASC
  parent_subdomainCount_DESC
  parent_createdAt_ASC
  parent_createdAt_DESC
  subdomainCount_ASC
  subdomainCount_DESC
  resolvedAddress_id_ASC
  resolvedAddress_id_DESC
  owner_id_ASC
  owner_id_DESC
  resolver_id_ASC
  resolver_id_DESC
  resolver_address_ASC
  resolver_address_DESC
  resolver_contentHash_ASC
  resolver_contentHash_DESC
  createdAt_ASC
  createdAt_DESC
}

type DomainsConnection {
  edges: [DomainEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input DomainWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  name_isNull: Boolean
  name_eq: String
  name_not_eq: String
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_containsInsensitive: String
  name_not_containsInsensitive: String
  name_startsWith: String
  name_not_startsWith: String
  name_endsWith: String
  name_not_endsWith: String
  labelName_isNull: Boolean
  labelName_eq: String
  labelName_not_eq: String
  labelName_gt: String
  labelName_gte: String
  labelName_lt: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_not_contains: String
  labelName_containsInsensitive: String
  labelName_not_containsInsensitive: String
  labelName_startsWith: String
  labelName_not_startsWith: String
  labelName_endsWith: String
  labelName_not_endsWith: String
  labelhash_isNull: Boolean
  labelhash_eq: String
  labelhash_not_eq: String
  labelhash_gt: String
  labelhash_gte: String
  labelhash_lt: String
  labelhash_lte: String
  labelhash_in: [String!]
  labelhash_not_in: [String!]
  labelhash_contains: String
  labelhash_not_contains: String
  labelhash_containsInsensitive: String
  labelhash_not_containsInsensitive: String
  labelhash_startsWith: String
  labelhash_not_startsWith: String
  labelhash_endsWith: String
  labelhash_not_endsWith: String
  parent_isNull: Boolean
  parent: DomainWhereInput
  subdomains_every: DomainWhereInput
  subdomains_some: DomainWhereInput
  subdomains_none: DomainWhereInput
  subdomainCount_isNull: Boolean
  subdomainCount_eq: Int
  subdomainCount_not_eq: Int
  subdomainCount_gt: Int
  subdomainCount_gte: Int
  subdomainCount_lt: Int
  subdomainCount_lte: Int
  subdomainCount_in: [Int!]
  subdomainCount_not_in: [Int!]
  resolvedAddress_isNull: Boolean
  resolvedAddress: AccountWhereInput
  owner_isNull: Boolean
  owner: AccountWhereInput
  resolver_isNull: Boolean
  resolver: ResolverWhereInput
  createdAt_isNull: Boolean
  createdAt_eq: BigInt
  createdAt_not_eq: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  registrations_every: RegistrationWhereInput
  registrations_some: RegistrationWhereInput
  registrations_none: RegistrationWhereInput
  AND: [DomainWhereInput!]
  OR: [DomainWhereInput!]
}

type NameRegistered implements RegistrationEvent {
  id: String!
  registration: Registration!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  registrant: Account!
  expiryDate: BigInt!
  cost: BigInt
}

type NameRegisteredEdge {
  node: NameRegistered!
  cursor: String!
}

enum NameRegisteredOrderByInput {
  id_ASC
  id_DESC
  registration_id_ASC
  registration_id_DESC
  registration_expiryDate_ASC
  registration_expiryDate_DESC
  registration_capacity_ASC
  registration_capacity_DESC
  registration_labelName_ASC
  registration_labelName_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  registrant_id_ASC
  registrant_id_DESC
  expiryDate_ASC
  expiryDate_DESC
  cost_ASC
  cost_DESC
}

type NameRegisteredsConnection {
  edges: [NameRegisteredEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input NameRegisteredWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  registration_isNull: Boolean
  registration: RegistrationWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  registrant_isNull: Boolean
  registrant: AccountWhereInput
  expiryDate_isNull: Boolean
  expiryDate_eq: BigInt
  expiryDate_not_eq: BigInt
  expiryDate_gt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lt: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  cost_isNull: Boolean
  cost_eq: BigInt
  cost_not_eq: BigInt
  cost_gt: BigInt
  cost_gte: BigInt
  cost_lt: BigInt
  cost_lte: BigInt
  cost_in: [BigInt!]
  cost_not_in: [BigInt!]
  AND: [NameRegisteredWhereInput!]
  OR: [NameRegisteredWhereInput!]
}

type NameRenewed implements RegistrationEvent {
  id: String!
  registration: Registration!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  registrant: Account!
  expiryDate: BigInt!
  cost: BigInt
}

type NameRenewedEdge {
  node: NameRenewed!
  cursor: String!
}

enum NameRenewedOrderByInput {
  id_ASC
  id_DESC
  registration_id_ASC
  registration_id_DESC
  registration_expiryDate_ASC
  registration_expiryDate_DESC
  registration_capacity_ASC
  registration_capacity_DESC
  registration_labelName_ASC
  registration_labelName_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  registrant_id_ASC
  registrant_id_DESC
  expiryDate_ASC
  expiryDate_DESC
  cost_ASC
  cost_DESC
}

type NameRenewedsConnection {
  edges: [NameRenewedEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input NameRenewedWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  registration_isNull: Boolean
  registration: RegistrationWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  registrant_isNull: Boolean
  registrant: AccountWhereInput
  expiryDate_isNull: Boolean
  expiryDate_eq: BigInt
  expiryDate_not_eq: BigInt
  expiryDate_gt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lt: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  cost_isNull: Boolean
  cost_eq: BigInt
  cost_not_eq: BigInt
  cost_gt: BigInt
  cost_gte: BigInt
  cost_lt: BigInt
  cost_lte: BigInt
  cost_in: [BigInt!]
  cost_not_in: [BigInt!]
  AND: [NameRenewedWhereInput!]
  OR: [NameRenewedWhereInput!]
}

type NewResolver implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  resolver: Resolver!
}

type NewResolverEdge {
  node: NewResolver!
  cursor: String!
}

enum NewResolverOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  resolver_id_ASC
  resolver_id_DESC
  resolver_address_ASC
  resolver_address_DESC
  resolver_contentHash_ASC
  resolver_contentHash_DESC
}

type NewResolversConnection {
  edges: [NewResolverEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input NewResolverWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  resolver_isNull: Boolean
  resolver: ResolverWhereInput
  AND: [NewResolverWhereInput!]
  OR: [NewResolverWhereInput!]
}

type NewSubdomain implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  to: Account!
  parentId: Domain!
  name: String!
}

type NewSubdomainEdge {
  node: NewSubdomain!
  cursor: String!
}

enum NewSubdomainOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  to_id_ASC
  to_id_DESC
  parentId_id_ASC
  parentId_id_DESC
  parentId_name_ASC
  parentId_name_DESC
  parentId_labelName_ASC
  parentId_labelName_DESC
  parentId_labelhash_ASC
  parentId_labelhash_DESC
  parentId_subdomainCount_ASC
  parentId_subdomainCount_DESC
  parentId_createdAt_ASC
  parentId_createdAt_DESC
  name_ASC
  name_DESC
}

type NewSubdomainsConnection {
  edges: [NewSubdomainEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input NewSubdomainWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  to_isNull: Boolean
  to: AccountWhereInput
  parentId_isNull: Boolean
  parentId: DomainWhereInput
  name_isNull: Boolean
  name_eq: String
  name_not_eq: String
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_containsInsensitive: String
  name_not_containsInsensitive: String
  name_startsWith: String
  name_not_startsWith: String
  name_endsWith: String
  name_not_endsWith: String
  AND: [NewSubdomainWhereInput!]
  OR: [NewSubdomainWhereInput!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type PriceChanged {
  id: String!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
}

type PriceChangedEdge {
  node: PriceChanged!
  cursor: String!
}

enum PriceChangedOrderByInput {
  id_ASC
  id_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
}

type PriceChangedsConnection {
  edges: [PriceChangedEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input PriceChangedWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  AND: [PriceChangedWhereInput!]
  OR: [PriceChangedWhereInput!]
}

type Query {
  domains(where: DomainWhereInput, orderBy: [DomainOrderByInput!], offset: Int, limit: Int): [Domain!]!
  domainById(id: String!): Domain
  domainByUniqueInput(where: WhereIdInput!): Domain @deprecated(reason: "Use domainById")
  domainsConnection(orderBy: [DomainOrderByInput!]!, after: String, first: Int, where: DomainWhereInput): DomainsConnection!
  setNftNames(where: SetNftNameWhereInput, orderBy: [SetNftNameOrderByInput!], offset: Int, limit: Int): [SetNftName!]!
  setNftNameById(id: String!): SetNftName
  setNftNameByUniqueInput(where: WhereIdInput!): SetNftName @deprecated(reason: "Use setNftNameById")
  setNftNamesConnection(orderBy: [SetNftNameOrderByInput!]!, after: String, first: Int, where: SetNftNameWhereInput): SetNftNamesConnection!
  domainEvents(where: DomainEventWhereInput, orderBy: [DomainEventOrderByInput!], offset: Int, limit: Int): [DomainEvent!]!
  domainEventsConnection(orderBy: [DomainEventOrderByInput!]!, after: String, first: Int, where: DomainEventWhereInput): DomainEventsConnection!
  sets(where: SetWhereInput, orderBy: [SetOrderByInput!], offset: Int, limit: Int): [Set!]!
  setById(id: String!): Set
  setByUniqueInput(where: WhereIdInput!): Set @deprecated(reason: "Use setById")
  setsConnection(orderBy: [SetOrderByInput!]!, after: String, first: Int, where: SetWhereInput): SetsConnection!
  setLinks(where: SetLinkWhereInput, orderBy: [SetLinkOrderByInput!], offset: Int, limit: Int): [SetLink!]!
  setLinkById(id: String!): SetLink
  setLinkByUniqueInput(where: WhereIdInput!): SetLink @deprecated(reason: "Use setLinkById")
  setLinksConnection(orderBy: [SetLinkOrderByInput!]!, after: String, first: Int, where: SetLinkWhereInput): SetLinksConnection!
  transfers(where: TransferWhereInput, orderBy: [TransferOrderByInput!], offset: Int, limit: Int): [Transfer!]!
  transferById(id: String!): Transfer
  transferByUniqueInput(where: WhereIdInput!): Transfer @deprecated(reason: "Use transferById")
  transfersConnection(orderBy: [TransferOrderByInput!]!, after: String, first: Int, where: TransferWhereInput): TransfersConnection!
  newSubdomains(where: NewSubdomainWhereInput, orderBy: [NewSubdomainOrderByInput!], offset: Int, limit: Int): [NewSubdomain!]!
  newSubdomainById(id: String!): NewSubdomain
  newSubdomainByUniqueInput(where: WhereIdInput!): NewSubdomain @deprecated(reason: "Use newSubdomainById")
  newSubdomainsConnection(orderBy: [NewSubdomainOrderByInput!]!, after: String, first: Int, where: NewSubdomainWhereInput): NewSubdomainsConnection!
  newResolvers(where: NewResolverWhereInput, orderBy: [NewResolverOrderByInput!], offset: Int, limit: Int): [NewResolver!]!
  newResolverById(id: String!): NewResolver
  newResolverByUniqueInput(where: WhereIdInput!): NewResolver @deprecated(reason: "Use newResolverById")
  newResolversConnection(orderBy: [NewResolverOrderByInput!]!, after: String, first: Int, where: NewResolverWhereInput): NewResolversConnection!
  accounts(where: AccountWhereInput, orderBy: [AccountOrderByInput!], offset: Int, limit: Int): [Account!]!
  accountById(id: String!): Account
  accountByUniqueInput(where: WhereIdInput!): Account @deprecated(reason: "Use accountById")
  accountsConnection(orderBy: [AccountOrderByInput!]!, after: String, first: Int, where: AccountWhereInput): AccountsConnection!
  setNames(where: SetNameWhereInput, orderBy: [SetNameOrderByInput!], offset: Int, limit: Int): [SetName!]!
  setNameById(id: String!): SetName
  setNameByUniqueInput(where: WhereIdInput!): SetName @deprecated(reason: "Use setNameById")
  setNamesConnection(orderBy: [SetNameOrderByInput!]!, after: String, first: Int, where: SetNameWhereInput): SetNamesConnection!
  accountEvents(where: AccountEventWhereInput, orderBy: [AccountEventOrderByInput!], offset: Int, limit: Int): [AccountEvent!]!
  accountEventsConnection(orderBy: [AccountEventOrderByInput!]!, after: String, first: Int, where: AccountEventWhereInput): AccountEventsConnection!
  approvals(where: ApprovalWhereInput, orderBy: [ApprovalOrderByInput!], offset: Int, limit: Int): [Approval!]!
  approvalById(id: String!): Approval
  approvalByUniqueInput(where: WhereIdInput!): Approval @deprecated(reason: "Use approvalById")
  approvalsConnection(orderBy: [ApprovalOrderByInput!]!, after: String, first: Int, where: ApprovalWhereInput): ApprovalsConnection!
  registrations(where: RegistrationWhereInput, orderBy: [RegistrationOrderByInput!], offset: Int, limit: Int): [Registration!]!
  registrationById(id: String!): Registration
  registrationByUniqueInput(where: WhereIdInput!): Registration @deprecated(reason: "Use registrationById")
  registrationsConnection(orderBy: [RegistrationOrderByInput!]!, after: String, first: Int, where: RegistrationWhereInput): RegistrationsConnection!
  capacityUpdateds(where: CapacityUpdatedWhereInput, orderBy: [CapacityUpdatedOrderByInput!], offset: Int, limit: Int): [CapacityUpdated!]!
  capacityUpdatedById(id: String!): CapacityUpdated
  capacityUpdatedByUniqueInput(where: WhereIdInput!): CapacityUpdated @deprecated(reason: "Use capacityUpdatedById")
  capacityUpdatedsConnection(orderBy: [CapacityUpdatedOrderByInput!]!, after: String, first: Int, where: CapacityUpdatedWhereInput): CapacityUpdatedsConnection!
  registrationEvents(where: RegistrationEventWhereInput, orderBy: [RegistrationEventOrderByInput!], offset: Int, limit: Int): [RegistrationEvent!]!
  registrationEventsConnection(orderBy: [RegistrationEventOrderByInput!]!, after: String, first: Int, where: RegistrationEventWhereInput): RegistrationEventsConnection!
  nameRegistereds(where: NameRegisteredWhereInput, orderBy: [NameRegisteredOrderByInput!], offset: Int, limit: Int): [NameRegistered!]!
  nameRegisteredById(id: String!): NameRegistered
  nameRegisteredByUniqueInput(where: WhereIdInput!): NameRegistered @deprecated(reason: "Use nameRegisteredById")
  nameRegisteredsConnection(orderBy: [NameRegisteredOrderByInput!]!, after: String, first: Int, where: NameRegisteredWhereInput): NameRegisteredsConnection!
  nameReneweds(where: NameRenewedWhereInput, orderBy: [NameRenewedOrderByInput!], offset: Int, limit: Int): [NameRenewed!]!
  nameRenewedById(id: String!): NameRenewed
  nameRenewedByUniqueInput(where: WhereIdInput!): NameRenewed @deprecated(reason: "Use nameRenewedById")
  nameRenewedsConnection(orderBy: [NameRenewedOrderByInput!]!, after: String, first: Int, where: NameRenewedWhereInput): NameRenewedsConnection!
  priceChangeds(where: PriceChangedWhereInput, orderBy: [PriceChangedOrderByInput!], offset: Int, limit: Int): [PriceChanged!]!
  priceChangedById(id: String!): PriceChanged
  priceChangedByUniqueInput(where: WhereIdInput!): PriceChanged @deprecated(reason: "Use priceChangedById")
  priceChangedsConnection(orderBy: [PriceChangedOrderByInput!]!, after: String, first: Int, where: PriceChangedWhereInput): PriceChangedsConnection!
  resolvers(where: ResolverWhereInput, orderBy: [ResolverOrderByInput!], offset: Int, limit: Int): [Resolver!]!
  resolverById(id: String!): Resolver
  resolverByUniqueInput(where: WhereIdInput!): Resolver @deprecated(reason: "Use resolverById")
  resolversConnection(orderBy: [ResolverOrderByInput!]!, after: String, first: Int, where: ResolverWhereInput): ResolversConnection!
  authorisationChangeds(where: AuthorisationChangedWhereInput, orderBy: [AuthorisationChangedOrderByInput!], offset: Int, limit: Int): [AuthorisationChanged!]!
  authorisationChangedById(id: String!): AuthorisationChanged
  authorisationChangedByUniqueInput(where: WhereIdInput!): AuthorisationChanged @deprecated(reason: "Use authorisationChangedById")
  authorisationChangedsConnection(orderBy: [AuthorisationChangedOrderByInput!]!, after: String, first: Int, where: AuthorisationChangedWhereInput): AuthorisationChangedsConnection!
  squidStatus: SquidStatus
}

type Registration {
  id: String!
  domain: Domain!
  origin: Domain
  expiryDate: BigInt
  capacity: BigInt
  labelName: String
}

type RegistrationEdge {
  node: Registration!
  cursor: String!
}

interface RegistrationEvent {
  id: String!
  registration: Registration!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  registrant: Account!
}

type RegistrationEventEdge {
  node: RegistrationEvent!
  cursor: String!
}

enum RegistrationEventOrderByInput {
  id_ASC
  id_DESC
  registration_id_ASC
  registration_id_DESC
  registration_expiryDate_ASC
  registration_expiryDate_DESC
  registration_capacity_ASC
  registration_capacity_DESC
  registration_labelName_ASC
  registration_labelName_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  registrant_id_ASC
  registrant_id_DESC
  _type_ASC
  _type_DESC
}

type RegistrationEventsConnection {
  edges: [RegistrationEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input RegistrationEventWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  registration_isNull: Boolean
  registration: RegistrationWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  registrant_isNull: Boolean
  registrant: AccountWhereInput
  AND: [RegistrationEventWhereInput!]
  OR: [RegistrationEventWhereInput!]
}

enum RegistrationOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  origin_id_ASC
  origin_id_DESC
  origin_name_ASC
  origin_name_DESC
  origin_labelName_ASC
  origin_labelName_DESC
  origin_labelhash_ASC
  origin_labelhash_DESC
  origin_subdomainCount_ASC
  origin_subdomainCount_DESC
  origin_createdAt_ASC
  origin_createdAt_DESC
  expiryDate_ASC
  expiryDate_DESC
  capacity_ASC
  capacity_DESC
  labelName_ASC
  labelName_DESC
}

type RegistrationsConnection {
  edges: [RegistrationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input RegistrationWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  origin_isNull: Boolean
  origin: DomainWhereInput
  expiryDate_isNull: Boolean
  expiryDate_eq: BigInt
  expiryDate_not_eq: BigInt
  expiryDate_gt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lt: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  capacity_isNull: Boolean
  capacity_eq: BigInt
  capacity_not_eq: BigInt
  capacity_gt: BigInt
  capacity_gte: BigInt
  capacity_lt: BigInt
  capacity_lte: BigInt
  capacity_in: [BigInt!]
  capacity_not_in: [BigInt!]
  labelName_isNull: Boolean
  labelName_eq: String
  labelName_not_eq: String
  labelName_gt: String
  labelName_gte: String
  labelName_lt: String
  labelName_lte: String
  labelName_in: [String!]
  labelName_not_in: [String!]
  labelName_contains: String
  labelName_not_contains: String
  labelName_containsInsensitive: String
  labelName_not_containsInsensitive: String
  labelName_startsWith: String
  labelName_not_startsWith: String
  labelName_endsWith: String
  labelName_not_endsWith: String
  AND: [RegistrationWhereInput!]
  OR: [RegistrationWhereInput!]
}

type Resolver {
  id: String!
  domain: Domain
  address: String!
  addr: Account
  contentHash: String
}

type ResolverEdge {
  node: Resolver!
  cursor: String!
}

enum ResolverOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  address_ASC
  address_DESC
  addr_id_ASC
  addr_id_DESC
  contentHash_ASC
  contentHash_DESC
}

type ResolversConnection {
  edges: [ResolverEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ResolverWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  address_isNull: Boolean
  address_eq: String
  address_not_eq: String
  address_gt: String
  address_gte: String
  address_lt: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_not_contains: String
  address_containsInsensitive: String
  address_not_containsInsensitive: String
  address_startsWith: String
  address_not_startsWith: String
  address_endsWith: String
  address_not_endsWith: String
  addr_isNull: Boolean
  addr: AccountWhereInput
  contentHash_isNull: Boolean
  contentHash_eq: String
  contentHash_not_eq: String
  contentHash_gt: String
  contentHash_gte: String
  contentHash_lt: String
  contentHash_lte: String
  contentHash_in: [String!]
  contentHash_not_in: [String!]
  contentHash_contains: String
  contentHash_not_contains: String
  contentHash_containsInsensitive: String
  contentHash_not_containsInsensitive: String
  contentHash_startsWith: String
  contentHash_not_startsWith: String
  contentHash_endsWith: String
  contentHash_not_endsWith: String
  AND: [ResolverWhereInput!]
  OR: [ResolverWhereInput!]
}

type Set implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  keyHash: String!
  value: String!
}

type SetEdge {
  node: Set!
  cursor: String!
}

type SetLink implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  keyHash: String!
  value: String!
}

type SetLinkEdge {
  node: SetLink!
  cursor: String!
}

enum SetLinkOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  keyHash_ASC
  keyHash_DESC
  value_ASC
  value_DESC
}

type SetLinksConnection {
  edges: [SetLinkEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SetLinkWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  keyHash_isNull: Boolean
  keyHash_eq: String
  keyHash_not_eq: String
  keyHash_gt: String
  keyHash_gte: String
  keyHash_lt: String
  keyHash_lte: String
  keyHash_in: [String!]
  keyHash_not_in: [String!]
  keyHash_contains: String
  keyHash_not_contains: String
  keyHash_containsInsensitive: String
  keyHash_not_containsInsensitive: String
  keyHash_startsWith: String
  keyHash_not_startsWith: String
  keyHash_endsWith: String
  keyHash_not_endsWith: String
  value_isNull: Boolean
  value_eq: String
  value_not_eq: String
  value_gt: String
  value_gte: String
  value_lt: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_not_contains: String
  value_containsInsensitive: String
  value_not_containsInsensitive: String
  value_startsWith: String
  value_not_startsWith: String
  value_endsWith: String
  value_not_endsWith: String
  AND: [SetLinkWhereInput!]
  OR: [SetLinkWhereInput!]
}

type SetName implements AccountEvent {
  id: String!
  account: Account!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  tokenId: Domain!
}

type SetNameEdge {
  node: SetName!
  cursor: String!
}

enum SetNameOrderByInput {
  id_ASC
  id_DESC
  account_id_ASC
  account_id_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  tokenId_id_ASC
  tokenId_id_DESC
  tokenId_name_ASC
  tokenId_name_DESC
  tokenId_labelName_ASC
  tokenId_labelName_DESC
  tokenId_labelhash_ASC
  tokenId_labelhash_DESC
  tokenId_subdomainCount_ASC
  tokenId_subdomainCount_DESC
  tokenId_createdAt_ASC
  tokenId_createdAt_DESC
}

type SetNamesConnection {
  edges: [SetNameEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SetNameWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  account_isNull: Boolean
  account: AccountWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  tokenId_isNull: Boolean
  tokenId: DomainWhereInput
  AND: [SetNameWhereInput!]
  OR: [SetNameWhereInput!]
}

type SetNftName implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  nftAddr: Account!
  nftTokenId: BigInt!
}

type SetNftNameEdge {
  node: SetNftName!
  cursor: String!
}

enum SetNftNameOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  nftAddr_id_ASC
  nftAddr_id_DESC
  nftTokenId_ASC
  nftTokenId_DESC
}

type SetNftNamesConnection {
  edges: [SetNftNameEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SetNftNameWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  nftAddr_isNull: Boolean
  nftAddr: AccountWhereInput
  nftTokenId_isNull: Boolean
  nftTokenId_eq: BigInt
  nftTokenId_not_eq: BigInt
  nftTokenId_gt: BigInt
  nftTokenId_gte: BigInt
  nftTokenId_lt: BigInt
  nftTokenId_lte: BigInt
  nftTokenId_in: [BigInt!]
  nftTokenId_not_in: [BigInt!]
  AND: [SetNftNameWhereInput!]
  OR: [SetNftNameWhereInput!]
}

enum SetOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  keyHash_ASC
  keyHash_DESC
  value_ASC
  value_DESC
}

type SetsConnection {
  edges: [SetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SetWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  keyHash_isNull: Boolean
  keyHash_eq: String
  keyHash_not_eq: String
  keyHash_gt: String
  keyHash_gte: String
  keyHash_lt: String
  keyHash_lte: String
  keyHash_in: [String!]
  keyHash_not_in: [String!]
  keyHash_contains: String
  keyHash_not_contains: String
  keyHash_containsInsensitive: String
  keyHash_not_containsInsensitive: String
  keyHash_startsWith: String
  keyHash_not_startsWith: String
  keyHash_endsWith: String
  keyHash_not_endsWith: String
  value_isNull: Boolean
  value_eq: String
  value_not_eq: String
  value_gt: String
  value_gte: String
  value_lt: String
  value_lte: String
  value_in: [String!]
  value_not_in: [String!]
  value_contains: String
  value_not_contains: String
  value_containsInsensitive: String
  value_not_containsInsensitive: String
  value_startsWith: String
  value_not_startsWith: String
  value_endsWith: String
  value_not_endsWith: String
  AND: [SetWhereInput!]
  OR: [SetWhereInput!]
}

type SquidStatus {
  """The height of the processed part of the chain"""
  height: Int
}

type Transfer implements DomainEvent {
  id: String!
  domain: Domain!
  blockNumber: Int!
  triggeredDate: BigInt!
  transactionID: String!
  from: Account
  to: Account!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  id_ASC
  id_DESC
  domain_id_ASC
  domain_id_DESC
  domain_name_ASC
  domain_name_DESC
  domain_labelName_ASC
  domain_labelName_DESC
  domain_labelhash_ASC
  domain_labelhash_DESC
  domain_subdomainCount_ASC
  domain_subdomainCount_DESC
  domain_createdAt_ASC
  domain_createdAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  triggeredDate_ASC
  triggeredDate_DESC
  transactionID_ASC
  transactionID_DESC
  from_id_ASC
  from_id_DESC
  to_id_ASC
  to_id_DESC
}

type TransfersConnection {
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input TransferWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  domain_isNull: Boolean
  domain: DomainWhereInput
  blockNumber_isNull: Boolean
  blockNumber_eq: Int
  blockNumber_not_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  triggeredDate_isNull: Boolean
  triggeredDate_eq: BigInt
  triggeredDate_not_eq: BigInt
  triggeredDate_gt: BigInt
  triggeredDate_gte: BigInt
  triggeredDate_lt: BigInt
  triggeredDate_lte: BigInt
  triggeredDate_in: [BigInt!]
  triggeredDate_not_in: [BigInt!]
  transactionID_isNull: Boolean
  transactionID_eq: String
  transactionID_not_eq: String
  transactionID_gt: String
  transactionID_gte: String
  transactionID_lt: String
  transactionID_lte: String
  transactionID_in: [String!]
  transactionID_not_in: [String!]
  transactionID_contains: String
  transactionID_not_contains: String
  transactionID_containsInsensitive: String
  transactionID_not_containsInsensitive: String
  transactionID_startsWith: String
  transactionID_not_startsWith: String
  transactionID_endsWith: String
  transactionID_not_endsWith: String
  from_isNull: Boolean
  from: AccountWhereInput
  to_isNull: Boolean
  to: AccountWhereInput
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
}

input WhereIdInput {
  id: String!
}

